-------------
Polimorfismo:
-------------
El polimorfismo como una herramienta para agrupar objetos que tienen
diferente comportamiento (distinto código) pero la misma interfaz. Entonces puedo
enviarles mensajes sin saber cómo lo implementan, e incluso sin saber a qué objeto
particular le estoy hablando.



Existen diferentes aspectos del polimorfismo en la POO
*) Objeto poliformo
*) Métodos virtuales
*) “this” polimorfo

Jerarquía de clases:
Object --> Persona --> Estudiante

-------------------
Objetos polimorfos:
-------------------
Son aquellos con la capacidad de poder referenciar a un objeto 
de distinto tipo (tipos compatibles)


Object o1 = new Persona();
//o1 guarda una referencia a un objeto de tipo Persona.
//acá referenciamos a una persona con un objeto de tipo Object

Object o2 = new Estudiante();
//o2 guarda un referencia a un objeto de tipo Estudiante.
//acá referenciamos a un estudiante con un objeto de tipo Object

Persona p1 = new Estudiante();
//p1 guarda una referencia a un objeto de tipo Estudiante.
//acá referenciamos a un estudiante con un objeto de tipo Persona

tanto como o1, o2 y p1 pueden ser tratados de diferentes formas
según la referencia que guarda. Ellos son objetos polimorfos.

Las super clases puden almacenar referencias correspondientes
a algunas de sus subclases.

Éste tipo de conversión se llama "conversión implicita".
Transformamos un objeto a un tipo compatible.

Una subclase no puede almacenar una referencia
de su super clase.

X Persona p = (Persona) new Object(); 
//no se puede porque "new Object" no es equivalente a una 
//referencia de tipo Persona.

Pero si se puede transformar tipos de variables con referencias
del tipo a cambiar.

Object o1 = new Persona();
Persona p = (Persona) o1;
//ésta linea, durante la ejecución, chequea que o1
// contenga una referencia de tipo Persona. Si
// efectivamente la tiene, se procede a asignarla en p.


Conversiones implícitas
	Se pasa de un tipo más específico a un general
	ej: de Estudiante a Object 
        Object o1 = new Persona();


Conversiones explícitas 
	Se pasa de un tipo general a uno más específico
	ej: de Object a Estudiante
        Object o1 = new Persona();
        Persona p = (Persona) o1;

public class Punto {
    int x;
    int y;
}

public class Figura {
    Punto origen;

    public void moverHacia(int x, int y) { 
		this.origen.x = x;
		this.origen.y = y;
    }

    public void dibujar() {
			System.out.println(“Dibujo una figura”);
    }

    public void redimensionar() {
			System.out.println(“Redimensiono una figura”);
    }

}

public class Circulo extends Figura {

    public void dibujar() {
        System.out.println("Dibujo Círculo");
    }

    public void redimensionar() {
        ...
    }
}

public class Rectangulo extends Figura {

    public void dibujar() {
        System.out.println("Dibujo Rectángulo");
    }

    public void redimensionar() {
        ...
    }
}

-------------------------------------------------------------------

Figura f1;
f1 = new Rectangulo();
f1.moverHacia(0,0);

Como no se redefinió el método mover dentro de la clase Rectangulo, 
él método que se invoca es aquel definido en la clase Figura.
Si lo hubiese redefinido se hubiese invocado el método redefinido.

--------------------------------------------------------------------

public void moverHacia(int x, int y) { 
	this.origen.x = x;
	this.origen.y = y;
	
}

--------------------------------------------------------------------

La visibilidad de métodos se determina mediante
la variable en la que está almacenada la referencia
pero se ejecutará la implementación de la referencia guardada.

Ej: tanto la clase Persona como la clase Estudiante
    tienen definido el método "imprimirAtributos".

    A pesar de que tendremos accesibilidad sólo a 
    los métodos definidos en la variable que guarda la referencia,
    la implementación que se ejecutará será la correspondiente
    a la de la clase referenciada.

    Estudiante e1 = new Estudiante();
    Persona p1 = estudiante;
    p1.imprimirAtributos();

    // se ejecuta la implementación de Estudiante.

--------------------------------------------------------------------

Dos objetos son polimórficos a la vista de un tercero porque
pueden enviar el mismo mensaje sin importar su implementación.

--------------------------------------------------------------------

Figura[] figuras = new Figura[2]; 
figuras[0] = new Rectangulo();
figuras[1] = new Circulo();


for (int i = 0; i < figuras.length; i++) {
	figuras[i].mover(0,0);
}

public void mover(int x, int y) { 
	this.origen.x = x;
	this.oriten.y = y;
	this.dibujar();
}


*) En un arreglo de elmentos de tipo Figura se pueden almacenar referencias a objetos de subclases. Es decir que el arreglo es un objeto polimorfico.

*) Cuando invoco al método dibujar, se invoca el método que corresponde al tipo objeto que realmente estoy referenciando.

Si invoco al método mover, que no está redefinido en las subclases, 
se ejecuta el definido en la clase Figura  (si lo estuviera se ejecutaría el redefinido).

*) En el atributo this, que referencia al objeto cuyo método se esta ejecutando 
(this polimórfico).





